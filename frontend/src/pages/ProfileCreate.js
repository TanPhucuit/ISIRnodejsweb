import React, { useState } from 'react';
import axios from 'axios';
import { toast } from 'react-toastify';

const ProfileCreate = ({ onSaved }) => {
  const [form, setForm] = useState({
    fullname: '',
    birthdate: '',
    phone: '',
    email: '',
    address: '',
    education: '',
    certificates: '',
    experience: '',
    skills: '',
    objective: '',
    linkedin: '',
    github: ''
  });
  const [errors, setErrors] = useState({});
  const [loading, setLoading] = useState(false);
  const [currentStep, setCurrentStep] = useState(1);
  const totalSteps = 3;

  const styles = {
    container: {
      width: '100%',
      backgroundColor: '#f8fafc',
      minHeight: '100%'
    },
    header: {
      marginBottom: '24px',
      paddingBottom: '16px',
      borderBottom: '1px solid #e2e8f0'
    },
    title: {
      fontSize: '28px',
      fontWeight: '700',
      color: '#1a202c',
      marginBottom: '8px',
      margin: 0
    },
    subtitle: {
      color: '#718096',
      fontSize: '14px',
      margin: '8px 0 0 0'
    },
    formCard: {
      background: 'white',
      borderRadius: '16px',
      boxShadow: '0 4px 6px rgba(0, 0, 0, 0.05)',
      overflow: 'hidden'
    },
    progressHeader: {
      background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
      padding: '24px',
      color: 'white'
    },
    progressTitle: {
      fontSize: '20px',
      fontWeight: '600',
      marginBottom: '16px',
      margin: '0 0 16px 0'
    },
    progressBar: {
      background: 'rgba(255,255,255,0.2)',
      borderRadius: '8px',
      height: '8px',
      overflow: 'hidden',
      marginBottom: '12px'
    },
    progressFill: {
      background: 'white',
      height: '100%',
      borderRadius: '8px',
      transition: 'width 0.3s ease',
      width: `${(currentStep / totalSteps) * 100}%`
    },
    progressText: {
      fontSize: '14px',
      opacity: 0.9
    },
    formBody: {
      padding: '32px'
    },
    stepContent: {
      display: currentStep === 1 ? 'block' : 'none'
    },
    stepTitle: {
      fontSize: '20px',
      fontWeight: '600',
      color: '#2d3748',
      marginBottom: '16px',
      display: 'flex',
      alignItems: 'center',
      gap: '8px'
    },
    stepDescription: {
      color: '#718096',
      fontSize: '14px',
      marginBottom: '24px',
      lineHeight: '1.5'
    },
    formGrid: {
      display: 'grid',
      gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))',
      gap: '20px',
      marginBottom: '24px'
    },
    formGroup: {
      marginBottom: '20px'
    },
    label: {
      display: 'block',
      marginBottom: '6px',
      fontWeight: '500',
      color: '#374151',
      fontSize: '14px'
    },
    required: {
      color: '#e53e3e',
      marginLeft: '4px'
    },
    input: {
      width: '100%',
      padding: '12px 16px',
      border: '2px solid #e5e7eb',
      borderRadius: '8px',
      fontSize: '16px',
      transition: 'all 0.2s ease',
      outline: 'none',
      backgroundColor: '#f9fafb'
    },
    inputFocus: {
      borderColor: '#667eea',
      backgroundColor: 'white',
      boxShadow: '0 0 0 3px rgba(102, 126, 234, 0.1)'
    },
    inputError: {
      borderColor: '#ef4444',
      backgroundColor: '#fef2f2'
    },
    textarea: {
      width: '100%',
      padding: '12px 16px',
      border: '2px solid #e5e7eb',
      borderRadius: '8px',
      fontSize: '16px',
      transition: 'all 0.2s ease',
      outline: 'none',
      backgroundColor: '#f9fafb',
      minHeight: '120px',
      resize: 'vertical'
    },
    select: {
      width: '100%',
      padding: '12px 16px',
      border: '2px solid #e5e7eb',
      borderRadius: '8px',
      fontSize: '16px',
      transition: 'all 0.2s ease',
      outline: 'none',
      backgroundColor: '#f9fafb',
      cursor: 'pointer'
    },
    errorMessage: {
      color: '#ef4444',
      fontSize: '12px',
      marginTop: '4px',
      display: 'flex',
      alignItems: 'center',
      gap: '4px'
    },
    buttonGroup: {
      display: 'flex',
      justifyContent: 'space-between',
      marginTop: '32px',
      paddingTop: '24px',
      borderTop: '1px solid #e2e8f0'
    },
    button: {
      padding: '12px 24px',
      borderRadius: '8px',
      fontSize: '16px',
      fontWeight: '600',
      cursor: 'pointer',
      transition: 'all 0.2s ease',
      border: 'none'
    },
    primaryButton: {
      background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
      color: 'white'
    },
    secondaryButton: {
      background: '#f3f4f6',
      color: '#6b7280'
    },
    disabledButton: {
      opacity: 0.5,
      cursor: 'not-allowed'
    },
    infoBox: {
      background: '#f0f9ff',
      border: '1px solid #bae6fd',
      borderRadius: '8px',
      padding: '16px',
      marginBottom: '24px'
    },
    infoTitle: {
      fontWeight: '600',
      color: '#0c4a6e',
      marginBottom: '8px',
      display: 'flex',
      alignItems: 'center',
      gap: '8px'
    },
    infoText: {
      color: '#075985',
      fontSize: '14px',
      lineHeight: '1.5'
    },
    skillsInput: {
      marginBottom: '8px'
    },
    skillsHelp: {
      fontSize: '12px',
      color: '#6b7280',
      fontStyle: 'italic'
    },
    previewCard: {
      background: '#f7fafc',
      border: '1px solid #e2e8f0',
      borderRadius: '12px',
      padding: '20px',
      marginTop: '20px'
    },
    previewTitle: {
      fontSize: '16px',
      fontWeight: '600',
      color: '#2d3748',
      marginBottom: '12px'
    },
    previewItem: {
      display: 'flex',
      marginBottom: '8px'
    },
    previewLabel: {
      minWidth: '100px',
      fontWeight: '500',
      color: '#4a5568',
      fontSize: '14px'
    },
    previewValue: {
      color: '#2d3748',
      fontSize: '14px'
    }
  };

  const validateStep = (step) => {
    const newErrors = {};
    
    if (step === 1) {
      if (!form.fullname.trim()) newErrors.fullname = 'H·ªç t√™n l√† b·∫Øt bu·ªôc';
      if (!form.email.trim()) newErrors.email = 'Email l√† b·∫Øt bu·ªôc';
      if (form.email && !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(form.email)) {
        newErrors.email = 'Email kh√¥ng h·ª£p l·ªá';
      }
      if (!form.phone.trim()) newErrors.phone = 'S·ªë ƒëi·ªán tho·∫°i l√† b·∫Øt bu·ªôc';
      if (form.phone && !/^[0-9]{10,11}$/.test(form.phone.replace(/\s/g, ''))) {
        newErrors.phone = 'S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá';
      }
    } else if (step === 2) {
      if (!form.education.trim()) newErrors.education = 'Tr√¨nh ƒë·ªô h·ªçc v·∫•n l√† b·∫Øt bu·ªôc';
      if (!form.experience.trim()) newErrors.experience = 'Kinh nghi·ªám l√† b·∫Øt bu·ªôc';
    }
    
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setForm({ ...form, [name]: value });
    
    // Clear error when user starts typing
    if (errors[name]) {
      setErrors({ ...errors, [name]: '' });
    }
  };

  const handleNext = () => {
    if (validateStep(currentStep)) {
      setCurrentStep(currentStep + 1);
    }
  };

  const handleBack = () => {
    setCurrentStep(currentStep - 1);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!validateStep(3)) return;
    
    setLoading(true);
    try {
      const token = localStorage.getItem('token');
      await axios.post('http://localhost:3001/api/candidate', form, {
        headers: { Authorization: `Bearer ${token}` }
      });
      toast.success('T·∫°o h·ªì s∆° th√†nh c√¥ng!');
      if (onSaved) onSaved();
    } catch (err) {
      toast.error('L·ªói khi t·∫°o h·ªì s∆°!');
      console.error(err);
    }
    setLoading(false);
  };

  const renderStep1 = () => (
    <div style={currentStep === 1 ? {} : {display: 'none'}}>
      <h3 style={styles.stepTitle}>
        üìã Th√¥ng tin c√° nh√¢n
      </h3>
      <p style={styles.stepDescription}>
        H√£y cung c·∫•p th√¥ng tin c∆° b·∫£n v·ªÅ b·∫£n th√¢n ƒë·ªÉ nh√† tuy·ªÉn d·ª•ng c√≥ th·ªÉ li√™n h·ªá v·ªõi b·∫°n.
      </p>

      <div style={styles.formGrid}>
        <div style={styles.formGroup}>
          <label style={styles.label}>
            H·ªç v√† t√™n<span style={styles.required}>*</span>
          </label>
          <input
            style={{
              ...styles.input,
              ...(errors.fullname ? styles.inputError : {})
            }}
            name="fullname"
            value={form.fullname}
            onChange={handleChange}
            placeholder="Nguy·ªÖn VƒÉn A"
          />
          {errors.fullname && (
            <div style={styles.errorMessage}>
              ‚ö†Ô∏è {errors.fullname}
            </div>
          )}
        </div>

        <div style={styles.formGroup}>
          <label style={styles.label}>Ng√†y sinh</label>
          <input
            style={styles.input}
            name="birthdate"
            type="date"
            value={form.birthdate}
            onChange={handleChange}
          />
        </div>
      </div>

      <div style={styles.formGrid}>
        <div style={styles.formGroup}>
          <label style={styles.label}>
            Email<span style={styles.required}>*</span>
          </label>
          <input
            style={{
              ...styles.input,
              ...(errors.email ? styles.inputError : {})
            }}
            name="email"
            type="email"
            value={form.email}
            onChange={handleChange}
            placeholder="email@example.com"
          />
          {errors.email && (
            <div style={styles.errorMessage}>
              ‚ö†Ô∏è {errors.email}
            </div>
          )}
        </div>

        <div style={styles.formGroup}>
          <label style={styles.label}>
            S·ªë ƒëi·ªán tho·∫°i<span style={styles.required}>*</span>
          </label>
          <input
            style={{
              ...styles.input,
              ...(errors.phone ? styles.inputError : {})
            }}
            name="phone"
            value={form.phone}
            onChange={handleChange}
            placeholder="0123456789"
          />
          {errors.phone && (
            <div style={styles.errorMessage}>
              ‚ö†Ô∏è {errors.phone}
            </div>
          )}
        </div>
      </div>

      <div style={styles.formGroup}>
        <label style={styles.label}>ƒê·ªãa ch·ªâ</label>
        <input
          style={styles.input}
          name="address"
          value={form.address}
          onChange={handleChange}
          placeholder="123 ƒê∆∞·ªùng ABC, Qu·∫≠n 1, TP.HCM"
        />
      </div>
    </div>
  );

  const renderStep2 = () => (
    <div style={currentStep === 2 ? {} : {display: 'none'}}>
      <h3 style={styles.stepTitle}>
        üéì Th√¥ng tin ngh·ªÅ nghi·ªáp
      </h3>
      <p style={styles.stepDescription}>
        Chia s·∫ª v·ªÅ tr√¨nh ƒë·ªô h·ªçc v·∫•n, kinh nghi·ªám v√† k·ªπ nƒÉng c·ªßa b·∫°n ƒë·ªÉ tƒÉng c∆° h·ªôi ƒë∆∞·ª£c tuy·ªÉn d·ª•ng.
      </p>

      <div style={styles.formGroup}>
        <label style={styles.label}>
          Tr√¨nh ƒë·ªô h·ªçc v·∫•n<span style={styles.required}>*</span>
        </label>
        <textarea
          style={{
            ...styles.textarea,
            ...(errors.education ? styles.inputError : {})
          }}
          name="education"
          value={form.education}
          onChange={handleChange}
          placeholder="V√≠ d·ª•: T·ªët nghi·ªáp ƒê·∫°i h·ªçc B√°ch Khoa TP.HCM, chuy√™n ng√†nh C√¥ng ngh·ªá Th√¥ng tin, GPA: 3.2/4.0"
        />
        {errors.education && (
          <div style={styles.errorMessage}>
            ‚ö†Ô∏è {errors.education}
          </div>
        )}
      </div>

      <div style={styles.formGroup}>
        <label style={styles.label}>
          Kinh nghi·ªám l√†m vi·ªác<span style={styles.required}>*</span>
        </label>
        <textarea
          style={{
            ...styles.textarea,
            ...(errors.experience ? styles.inputError : {})
          }}
          name="experience"
          value={form.experience}
          onChange={handleChange}
          placeholder="V√≠ d·ª•: 2 nƒÉm kinh nghi·ªám ph√°t tri·ªÉn web v·ªõi React v√† Node.js t·∫°i C√¥ng ty ABC. Tham gia x√¢y d·ª±ng 5+ d·ª± √°n e-commerce..."
        />
        {errors.experience && (
          <div style={styles.errorMessage}>
            ‚ö†Ô∏è {errors.experience}
          </div>
        )}
      </div>

      <div style={styles.formGroup}>
        <label style={styles.label}>Ch·ª©ng ch·ªâ</label>
        <input
          style={styles.input}
          name="certificates"
          value={form.certificates}
          onChange={handleChange}
          placeholder="AWS Certified, Google Analytics, TOEIC 850..."
        />
      </div>

      <div style={styles.formGroup}>
        <label style={styles.label}>K·ªπ nƒÉng</label>
        <input
          style={{...styles.input, ...styles.skillsInput}}
          name="skills"
          value={form.skills}
          onChange={handleChange}
          placeholder="JavaScript, React, Node.js, Python, SQL..."
        />
        <div style={styles.skillsHelp}>
          üí° NgƒÉn c√°ch c√°c k·ªπ nƒÉng b·∫±ng d·∫•u ph·∫©y
        </div>
      </div>
    </div>
  );

  const renderStep3 = () => (
    <div style={currentStep === 3 ? {} : {display: 'none'}}>
      <h3 style={styles.stepTitle}>
        üéØ Ho√†n thi·ªán h·ªì s∆°
      </h3>
      <p style={styles.stepDescription}>
        Th√™m nh·ªØng th√¥ng tin cu·ªëi c√πng ƒë·ªÉ ho√†n thi·ªán h·ªì s∆° c·ªßa b·∫°n.
      </p>

      <div style={styles.formGroup}>
        <label style={styles.label}>M·ª•c ti√™u ngh·ªÅ nghi·ªáp</label>
        <textarea
          style={styles.textarea}
          name="objective"
          value={form.objective}
          onChange={handleChange}
          placeholder="M√¥ t·∫£ ng·∫Øn g·ªçn v·ªÅ m·ª•c ti√™u ngh·ªÅ nghi·ªáp v√† ƒë·ªãnh h∆∞·ªõng ph√°t tri·ªÉn c·ªßa b·∫°n..."
        />
      </div>

      <div style={styles.formGrid}>
        <div style={styles.formGroup}>
          <label style={styles.label}>LinkedIn</label>
          <input
            style={styles.input}
            name="linkedin"
            value={form.linkedin}
            onChange={handleChange}
            placeholder="https://linkedin.com/in/yourprofile"
          />
        </div>

        <div style={styles.formGroup}>
          <label style={styles.label}>GitHub</label>
          <input
            style={styles.input}
            name="github"
            value={form.github}
            onChange={handleChange}
            placeholder="https://github.com/yourusername"
          />
        </div>
      </div>

      {/* Preview */}
      <div style={styles.previewCard}>
        <h4 style={styles.previewTitle}>üîç Xem tr∆∞·ªõc h·ªì s∆°</h4>
        <div style={styles.previewItem}>
          <div style={styles.previewLabel}>H·ªç t√™n:</div>
          <div style={styles.previewValue}>{form.fullname || 'Ch∆∞a nh·∫≠p'}</div>
        </div>
        <div style={styles.previewItem}>
          <div style={styles.previewLabel}>Email:</div>
          <div style={styles.previewValue}>{form.email || 'Ch∆∞a nh·∫≠p'}</div>
        </div>
        <div style={styles.previewItem}>
          <div style={styles.previewLabel}>ƒêi·ªán tho·∫°i:</div>
          <div style={styles.previewValue}>{form.phone || 'Ch∆∞a nh·∫≠p'}</div>
        </div>
        <div style={styles.previewItem}>
          <div style={styles.previewLabel}>H·ªçc v·∫•n:</div>
          <div style={styles.previewValue}>{form.education || 'Ch∆∞a nh·∫≠p'}</div>
          </div>
          </div>
          </div>
  );

  return (
    <div style={styles.container}>
      {/* Header */}
      <div style={styles.header}>
        <h1 style={styles.title}>T·∫°o h·ªì s∆° ·ª©ng vi√™n</h1>
        <p style={styles.subtitle}>
          T·∫°o h·ªì s∆° chuy√™n nghi·ªáp ƒë·ªÉ tƒÉng c∆° h·ªôi vi·ªác l√†m
        </p>
          </div>

      {/* Form Card */}
      <div style={styles.formCard}>
        {/* Progress Header */}
        <div style={styles.progressHeader}>
          <h2 style={styles.progressTitle}>
            B∆∞·ªõc {currentStep} / {totalSteps}
          </h2>
          <div style={styles.progressBar}>
            <div style={styles.progressFill}></div>
          </div>
          <div style={styles.progressText}>
            {currentStep === 1 && 'Th√¥ng tin c√° nh√¢n'}
            {currentStep === 2 && 'Th√¥ng tin ngh·ªÅ nghi·ªáp'}
            {currentStep === 3 && 'Ho√†n thi·ªán h·ªì s∆°'}
          </div>
        </div>

        {/* Form Body */}
        <div style={styles.formBody}>
          <form onSubmit={handleSubmit}>
            {/* Info Box */}
            <div style={styles.infoBox}>
              <div style={styles.infoTitle}>
                üí° M·∫πo t·∫°o h·ªì s∆° hi·ªáu qu·∫£
              </div>
              <div style={styles.infoText}>
                {currentStep === 1 && 'ƒêi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin li√™n h·ªá ƒë·ªÉ nh√† tuy·ªÉn d·ª•ng c√≥ th·ªÉ d·ªÖ d√†ng li√™n h·ªá v·ªõi b·∫°n.'}
                {currentStep === 2 && 'M√¥ t·∫£ chi ti·∫øt kinh nghi·ªám v√† k·ªπ nƒÉng v·ªõi c√°c v√≠ d·ª• c·ª• th·ªÉ ƒë·ªÉ tƒÉng ·∫•n t∆∞·ª£ng.'}
                {currentStep === 3 && 'Ki·ªÉm tra l·∫°i th√¥ng tin m·ªôt l·∫ßn n·ªØa tr∆∞·ªõc khi ho√†n th√†nh.'}
              </div>
            </div>

            {/* Step Content */}
            {renderStep1()}
            {renderStep2()}
            {renderStep3()}

            {/* Button Group */}
            <div style={styles.buttonGroup}>
              <button
                type="button"
                style={{
                  ...styles.button,
                  ...styles.secondaryButton,
                  ...(currentStep === 1 ? styles.disabledButton : {})
                }}
                onClick={handleBack}
                disabled={currentStep === 1}
              >
                ‚Üê Quay l·∫°i
              </button>

              {currentStep < totalSteps ? (
                <button
                  type="button"
                  style={{...styles.button, ...styles.primaryButton}}
                  onClick={handleNext}
                  onMouseEnter={(e) => e.target.style.transform = 'translateY(-1px)'}
                  onMouseLeave={(e) => e.target.style.transform = 'translateY(0)'}
                >
                  Ti·∫øp t·ª•c ‚Üí
                </button>
              ) : (
                <button
                  type="submit"
                  disabled={loading}
                  style={{
                    ...styles.button,
                    ...styles.primaryButton,
                    ...(loading ? styles.disabledButton : {})
                  }}
                  onMouseEnter={(e) => {
                    if (!loading) e.target.style.transform = 'translateY(-1px)';
                  }}
                  onMouseLeave={(e) => e.target.style.transform = 'translateY(0)'}
                >
                  {loading ? '‚è≥ ƒêang t·∫°o...' : 'üéâ Ho√†n th√†nh'}
                </button>
              )}
            </div>
      </form>
        </div>
      </div>
    </div>
  );
};

export default ProfileCreate; 